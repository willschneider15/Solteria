import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import BN from 'bn.js';
import { EnumLayout } from '@project-serum/borsh';
export declare const TOKEN_PROGRAM_ID: PublicKey;
export declare const WRAPPED_SOL_MINT: PublicKey;
export declare type TokenInstructionLayout = {
    initializeMint: {
        decimals: number;
        mintAuthority: PublicKey;
        freezeAuthority: PublicKey | null;
    };
} | {
    initializeAccount: any;
} | {
    initializeMultisig: {
        m: number;
    };
} | {
    transfer: {
        amount: BN;
    };
} | {
    approve: {
        amount: BN;
    };
} | {
    revoke: any;
} | {
    setAuthority: {
        authorityType: number;
        newAuthority: PublicKey | null;
    };
} | {
    mintTo: {
        amount: BN;
    };
} | {
    burn: {
        amount: BN;
    };
} | {
    closeAccount: any;
} | {
    freezeAccount: any;
} | {
    thawAccount: any;
} | {
    transferChecked: {
        amount: BN;
        decimals: number;
    };
} | {
    approveChecked: {
        amount: BN;
        decimals: number;
    };
} | {
    mintToChecked: {
        amount: BN;
        decimals: number;
    };
} | {
    burnChecked: {
        amount: BN;
        decimals: number;
    };
};
export declare const TokenInstructionLayout: EnumLayout<TokenInstructionLayout>;
export interface InitializeMintParams {
    mint: PublicKey;
    decimals: number;
    mintAuthority: PublicKey;
    freezeAuthority?: PublicKey | null;
}
export interface InitializeAccountParams {
    account: PublicKey;
    mint: PublicKey;
    owner: PublicKey;
}
export interface TransferParams {
    source: PublicKey;
    destination: PublicKey;
    amount: BN;
    owner: PublicKey;
}
export interface ApproveParams {
    source: PublicKey;
    delegate: PublicKey;
    amount: BN;
    owner: PublicKey;
}
export interface RevokeParams {
    source: PublicKey;
    owner: PublicKey;
}
export interface SetAuthorityParams {
    target: PublicKey;
    currentAuthority: PublicKey;
    newAuthority?: PublicKey | null;
    authorityType: number;
}
export interface MintToParams {
    mint: PublicKey;
    destination: PublicKey;
    amount: BN;
    mintAuthority: PublicKey;
}
export interface BurnParams {
    source: PublicKey;
    mint: PublicKey;
    amount: BN;
    owner: PublicKey;
}
export interface CloseAccountParams {
    source: PublicKey;
    destination: PublicKey;
    owner: PublicKey;
}
export declare class TokenInstructions {
    static initializeMint({ mint, decimals, mintAuthority, freezeAuthority, }: InitializeMintParams): TransactionInstruction;
    static initializeAccount({ account, mint, owner, }: InitializeAccountParams): TransactionInstruction;
    static transfer({ source, destination, amount, owner, }: TransferParams): TransactionInstruction;
    static approve({ source, delegate, amount, owner, }: ApproveParams): TransactionInstruction;
    static revoke({ source, owner }: RevokeParams): TransactionInstruction;
    static setAuthority({ target, currentAuthority, newAuthority, authorityType, }: SetAuthorityParams): TransactionInstruction;
    static mintTo({ mint, destination, amount, mintAuthority, }: MintToParams): TransactionInstruction;
    static closeAccount({ source, destination, owner, }: CloseAccountParams): TransactionInstruction;
}
export declare type TokenInstruction = {
    type: 'initializeMint';
    params: InitializeMintParams;
} | {
    type: 'initializeAccount';
    params: InitializeAccountParams;
} | {
    type: 'transfer';
    params: TransferParams;
} | {
    type: 'approve';
    params: ApproveParams;
} | {
    type: 'revoke';
    params: RevokeParams;
} | {
    type: 'setAuthority';
    params: SetAuthorityParams;
} | {
    type: 'mintTo';
    params: MintToParams;
} | {
    type: 'burn';
    params: BurnParams;
} | {
    type: 'closeAccount';
    params: CloseAccountParams;
};
export declare function decodeTokenInstruction(instruction: TransactionInstruction): TokenInstruction;
//# sourceMappingURL=instructions.d.ts.map