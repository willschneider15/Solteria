import { jsx as _jsx } from "react/jsx-runtime";
import React, { useContext, useState } from "react";
const _NavStackContext = React.createContext(null);
export function useNavigation() {
    const ctx = useContext(_NavStackContext);
    if (ctx === null) {
        throw new Error("Context not available");
    }
    return ctx;
}
export function NavStackProvider({ initialRoute, navButtonRight, style, titleStyle, children, }) {
    const [stack, setStack] = useState([{ navAction: "push", ...initialRoute }]);
    const [titleOverride, setTitleOverride] = useState(initialRoute.title);
    const [navButtonRightOverride, setNavButtonRightOverride] = useState(navButtonRight);
    const [_style, setStyle] = useState(style);
    const [contentStyle, setContentStyle] = useState({});
    const [_titleStyle, _setTitleStyle] = useState(titleStyle);
    const push = (route, props) => {
        setStack((oldStack) => [
            ...oldStack,
            { name: route, props, navAction: "push" },
        ]);
    };
    const pop = () => {
        setStack((oldStack) => {
            let newStack = [...oldStack];
            newStack = newStack.slice(0, newStack.length - 1);
            newStack[newStack.length - 1]["navAction"] = "pop";
            return newStack;
        });
    };
    const toRoot = () => {
        setStack([stack[0]]);
    };
    return (_jsx(_NavStackContext.Provider, { value: {
            activeRoute: stack[stack.length - 1],
            push,
            pop,
            isRoot: stack.length === 1,
            toRoot,
            title: titleOverride,
            setTitle: setTitleOverride,
            navButtonRight: navButtonRightOverride,
            setNavButtonRight: setNavButtonRightOverride,
            style: _style,
            setStyle,
            contentStyle,
            setContentStyle,
            titleStyle: _titleStyle,
            setTitleStyle: _setTitleStyle,
        }, children: children }));
}
//# sourceMappingURL=Context.js.map