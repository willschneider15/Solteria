import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTheme } from "../../Context";
import { Button, NavAnimation, ScrollBar, Text, View } from "../../elements";
import { ArrowBack } from "../Icons";
import { NavStackProvider, useNavigation } from "./Context";
// TODO: share this with the main app.
const NAV_BAR_HEIGHT = 56;
const NAV_BUTTON_WIDTH = 38;
export { useNavigation } from "./Context";
export const Stack = {
    Navigator,
    Screen,
};
function Navigator({ initialRoute, children, options, style, titleStyle, navButtonRight, }) {
    const isArray = children && children.length !== undefined;
    const navScreens = children === undefined ? [] : isArray ? children : [children];
    return (_jsx(NavStackProvider, { initialRoute: initialRoute, style: style, titleStyle: titleStyle, navButtonRight: navButtonRight, children: _jsx(NavStackInner, { navScreens: navScreens, options: options }) }));
}
function NavStackInner({ navScreens, options, }) {
    var _a;
    let { isRoot, activeRoute, pop, navButtonRight, title, style, contentStyle, titleStyle, } = useNavigation();
    const navButtonLeft = isRoot ? null : _jsx(NavBackButton, { onClick: () => pop() });
    const activeScreen = navScreens.find((c) => c.props.name === activeRoute.name);
    const { title: titleDefault } = options({
        route: activeRoute,
    });
    if (!title) {
        title = titleDefault;
    }
    return (_jsx(NavAnimation, { routeName: activeRoute.name, navAction: "push", children: _jsx(WithNav, { title: title, navButtonLeft: navButtonLeft, navButtonRight: navButtonRight, navbarStyle: style, navbarTitleStyle: titleStyle, navContentStyle: contentStyle, children: activeScreen.props.component({ ...((_a = activeRoute.props) !== null && _a !== void 0 ? _a : {}) }) }) }));
}
function Screen({ component, name }) {
    // TODO: allow empty tags.
    return _jsx(View, { style: { display: "none" } });
}
function WithNav({ title, navButtonLeft, navButtonRight, children, navbarStyle = {}, navbarTitleStyle = {}, navContentStyle = {}, }) {
    return (_jsxs(View, { style: { display: "flex", flexDirection: "column", height: "100%" }, children: [_jsx(NavBar, { title: title || "", navButtonLeft: navButtonLeft, navButtonRight: navButtonRight, style: navbarStyle, titleStyle: navbarTitleStyle }), _jsx(NavContent, { style: navContentStyle, renderComponent: children })] }));
}
function NavBar({ title, navButtonLeft, navButtonRight, style = {}, titleStyle = {}, }) {
    return (_jsx(View, { style: {
            display: "flex",
            height: `${NAV_BAR_HEIGHT}px`,
            position: "relative",
            justifyContent: "space-between",
            padding: "10px 16px",
            ...style,
        }, children: _jsxs(View, { style: { position: "relative", width: "100%", display: "flex" }, children: [_jsx(NavButton, { button: navButtonLeft }), _jsx(CenterDisplay, { title: title, titleStyle: titleStyle }), _jsx(NavButton, { button: navButtonRight, align: "right" })] }) }));
}
function NavButton({ button, align = "left", }) {
    const alignment = { [align]: 0 };
    return (_jsx(View, { style: {
            position: "absolute",
            height: "100%",
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            ...alignment,
        }, children: button ? button : _jsx(DummyButton, {}) }));
}
function NavBackButton({ onClick }) {
    const theme = useTheme();
    return (_jsx(View, { style: {
            width: `${NAV_BUTTON_WIDTH}px`,
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            position: "relative",
        }, children: _jsx(Button, { onClick: onClick, style: {
                backgroundColor: "transparent",
                height: "24px",
                width: "24px",
                minWidth: "24px",
                padding: 0,
            }, children: _jsx(ArrowBack, { fill: theme.custom.colors.secondary }) }) }));
}
function NavContent({ renderComponent, style, }) {
    const _style = {
        flex: 1,
        ...style,
    };
    return (_jsx(View, { style: _style, children: _jsx(ScrollBar, { children: renderComponent }) }));
}
function CenterDisplay({ title, titleStyle, }) {
    return (_jsx(View, { style: {
            visibility: title ? undefined : "hidden",
            overflow: "hidden",
            maxWidth: `calc(100% - ${NAV_BUTTON_WIDTH * 2}px)`,
            margin: "0 auto",
            display: "flex",
            alignItems: "center",
        }, children: _jsx(NavTitleLabel, { title: title, style: titleStyle }) }));
}
function NavTitleLabel({ title, style, }) {
    const theme = useTheme();
    return (_jsx(Text, { style: {
            fontSize: "18px",
            fontWeight: 500,
            color: theme.custom.colors.fontColor,
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            textAlign: "center",
            lineHeight: "24px",
            ...style,
        }, children: title }));
}
function DummyButton() {
    return (_jsx(View, { style: {
            width: `${NAV_BUTTON_WIDTH}px`,
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
        } }));
}
//# sourceMappingURL=index.js.map