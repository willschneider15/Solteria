import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useContext, useState } from "react";
import { useTheme } from "../Context";
import { Button, ScrollBar, View } from "../elements";
export const Tab = {
    Navigator,
    Screen,
    Icon,
};
function Navigator({ children, style, top, disableScroll, options, initialRouteName, }) {
    const isArray = children && children.length !== undefined;
    const childrenArray = isArray ? children : [children];
    const initialTab = !children
        ? null
        : initialRouteName || childrenArray[0].props.name;
    return (_jsx(TabProvider, { initialTab: initialTab, options: options, children: top ? (_jsxs(View, { style: {
                height: "100%",
                display: "flex",
                flexDirection: "column",
            }, children: [_jsx(TabBar, { tabScreens: childrenArray, style: style }), _jsx(TabContent, { tabScreens: childrenArray, disableScroll: disableScroll })] })) : (_jsxs(View, { style: {
                height: "100%",
                display: "flex",
                flexDirection: "column",
            }, children: [_jsx(TabContent, { tabScreens: childrenArray, disableScroll: disableScroll }), _jsx(TabBar, { tabScreens: childrenArray, style: style })] })) }));
}
function Screen({ name, component }) {
    return _jsx(_Fragment, {});
}
function TabContent({ tabScreens, disableScroll }) {
    const { activeTab } = useTabContext();
    const screen = tabScreens.find((t) => t.props.name === activeTab);
    const inner = (_jsx(View, { style: {
            flex: 1,
            height: "100%",
        }, children: screen.props.component() }));
    return disableScroll ? inner : _jsx(ScrollBar, { children: inner });
}
function TabBar({ tabScreens, style }) {
    const theme = useTheme();
    const { activeTab, options, setActiveTab } = useTabContext();
    return (_jsx(View, { style: {
            display: "flex",
            width: "100%",
            backgroundColor: theme.custom.colors.nav,
            height: "64px",
            borderTop: `solid 1pt ${theme.custom.colors.border}`,
            ...style,
        }, children: tabScreens.map((screen) => {
            const routedOptions = options({ route: { name: screen.props.name } });
            const focused = activeTab === screen.props.name;
            const color = focused
                ? routedOptions.tabBarActiveTintColor
                : routedOptions.tabBarInactiveTintColor;
            return (_jsxs(Button, { style: {
                    padding: 0,
                    height: "100%",
                    flex: 1,
                    display: "flex",
                    justifyContent: "center",
                    flexDirection: "column",
                    background: "transparent",
                    borderRadius: 0,
                    position: "relative",
                    ...routedOptions.tabBarStyle,
                }, onClick: () => setActiveTab(screen.props.name), children: [_jsx(View, { style: { width: "100%", height: "100%" }, children: routedOptions.tabBarIcon({ focused }) }), _jsx(View, { style: {
                            position: "absolute",
                            height: "2px",
                            left: 0,
                            right: 0,
                            bottom: 0,
                            backgroundColor: color,
                        } })] }, screen.props.name));
        }) }));
}
const _TabContext = React.createContext(null);
function TabProvider({ initialTab, options, children }) {
    const [activeTab, setActiveTab] = useState(initialTab);
    return (_jsx(_TabContext.Provider, { value: {
            activeTab,
            setActiveTab,
            options,
        }, children: children }));
}
export function useTabContext() {
    const ctx = useContext(_TabContext);
    if (ctx === null) {
        throw new Error("Context not available");
    }
    return ctx;
}
function Icon({ element }) {
    return (_jsx(View, { style: {
            height: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
        }, children: _jsx(View, { style: {
                width: "25px",
                height: "25px",
                marginLeft: "auto",
                marginRight: "auto",
            }, children: element }) }));
}
//# sourceMappingURL=Tab.js.map