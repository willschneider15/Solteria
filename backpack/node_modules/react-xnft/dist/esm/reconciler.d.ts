import type { ReactNode } from "react";
import type { Event } from "@coral-xyz/common-public";
export declare const ReactXnft: {
    events: import("eventemitter3")<string | symbol, any>;
    render(reactNode: any): void;
    renderWidget(reactNode: any): void;
};
export declare function reconcilerRender(reactNode: any): void;
export type RootContainer = {
    host: Host;
    children: Element[];
};
export type Host = {
    nextId: () => number;
};
export declare const HOST: Host;
type Style = React.CSSProperties;
export type NodeSerialized = TableNodeSerialized | TableRowNodeSerialized | TextNodeSerialized | TextFieldNodeSerialized | ImageNodeSerialized | ViewNodeSerialized | ButtonNodeSerialized | LoadingNodeSerialized | ScrollBarNodeSerialized | SvgNodeSerialized | PathNodeSerialized | CircleNodeSerialized | IframeNodeSerialized | NavAnimationNodeSerialized | BalancesTableNodeSerialized | BalancesTableHeadNodeSerialized | BalancesTableContentNodeSerialized | BalancesTableRowNodeSerialized | BalancesTableCellNodeSerialized | BalancesTableFooterNodeSerialized | AudioNodeSerialized | VideoNodeSerialized | CustomNodeSerialized;
export type NodeProps = TableProps | TableRowProps | TextProps | TextFieldProps | ImageProps | ViewProps | ButtonProps | LoadingProps | ScrollBarProps | IframeProps | SvgProps | PathProps | CircleProps | NavAnimationProps | BalancesTableProps | BalancesTableHeadProps | BalancesTableContentProps | BalancesTableRowProps | BalancesTableCellProps | BalancesTableFooterProps | CustomProps;
export declare enum NodeKind {
    Table = "Table",
    TableRow = "TableRow",
    Text = "Text",
    TextField = "TextField",
    Image = "Image",
    View = "View",
    Audio = "Audio",
    Video = "Video",
    Button = "Button",
    Loading = "Loading",
    ScrollBar = "ScrollBar",
    Svg = "Svg",
    Path = "Path",
    Circle = "Circle",
    Iframe = "Iframe",
    NavAnimation = "NavAnimation",
    BalancesTable = "BalancesTable",
    BalancesTableHead = "BalancesTableHead",
    BalancesTableContent = "BalancesTableContent",
    BalancesTableRow = "BalancesTableRow",
    BalancesTableCell = "BalancesTableCell",
    BalancesTableFooter = "BalancesTableFooter",
    Custom = "Custom"
}
type TableNodeSerialized = DefNodeSerialized<NodeKind.Table, TableProps>;
export type TableProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
};
type TableRowNodeSerialized = DefNodeSerialized<NodeKind.TableRow, TableRowProps>;
export type TableRowProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
};
type TextNodeSerialized = DefNodeSerialized<NodeKind.Text, TextProps>;
export type TextProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    tw?: string;
};
type TextFieldNodeSerialized = DefNodeSerialized<NodeKind.TextField, TextFieldProps>;
export type TextFieldProps = {
    onChange?: (event: Event) => void;
    value?: any;
    multiline?: boolean;
    numberOfLines?: number;
    placeholder?: string;
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    tw?: string;
};
type ImageNodeSerialized = DefNodeSerialized<NodeKind.Image, ImageProps>;
export interface ImageProps {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    src: string;
    tw?: string;
}
type ViewNodeSerialized = DefNodeSerialized<NodeKind.View, ViewProps>;
export type ViewProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    tw?: string;
};
type ButtonNodeSerialized = DefNodeSerialized<NodeKind.Button, ButtonProps>;
export type ButtonProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    tw?: string;
};
type LoadingNodeSerialized = DefNodeSerialized<NodeKind.Loading, LoadingProps>;
export type LoadingProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
};
type AudioNodeSerialized = DefNodeSerialized<NodeKind.Audio, AudioProps>;
type AudioProps = {
    style: Style;
    children: undefined;
    volume: number;
    src: string;
    stream: MediaStream;
    muted: boolean;
    autoplay: boolean;
};
type VideoNodeSerialized = DefNodeSerialized<NodeKind.Video, VideoProps>;
type VideoProps = {
    style?: Style;
    onClick?: () => void;
    children: undefined;
    volume: number;
    src: string;
    stream: MediaStream;
    muted: boolean;
    autoplay: boolean;
    tw?: string;
};
type ScrollBarNodeSerialized = DefNodeSerialized<NodeKind.ScrollBar, ScrollBarProps>;
export type ScrollBarProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
};
type SvgNodeSerialized = DefNodeSerialized<NodeKind.Svg, SvgProps>;
export type SvgProps = {
    width: number;
    height: number;
    viewBox?: string;
    fill?: string;
    children?: ReactNode | undefined;
    style?: Style;
    onClick?: () => void;
    tw?: string;
};
type PathNodeSerialized = DefNodeSerialized<NodeKind.Path, PathProps>;
export type PathProps = {
    d: string;
    fill: string;
    style?: Style;
    fillRule?: string;
    clipRule?: string;
    stroke?: string;
    tw?: string;
};
type CircleNodeSerialized = DefNodeSerialized<NodeKind.Circle, CircleProps>;
export type CircleProps = {
    cx: string;
    cy: string;
    r: string;
    fill: string;
    stroke: string;
    strokeWidth: string;
    pathLength: string;
    strokeDasharray: string;
    strokeDashoffset: string;
    tw?: string;
};
type IframeNodeSerialized = DefNodeSerialized<NodeKind.Iframe, IframeProps>;
export type IframeProps = {
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
    src: string;
    width?: string;
    height?: string;
    xnft?: boolean;
    tw?: string;
};
export type CustomProps = Record<string, any>;
export type NavAnimationNodeSerialized = DefNodeSerialized<NodeKind.NavAnimation, NavAnimationProps>;
export type NavAnimationProps = {
    routeName: string;
    navAction: string;
    style?: Style;
    onClick?: () => void;
    children?: ReactNode | undefined;
};
export type TextSerialized = {
    id: number;
    kind: "raw";
    text: string | number;
};
type BalancesTableNodeSerialized = DefNodeSerialized<NodeKind.BalancesTable, BalancesTableProps>;
export type BalancesTableProps = {
    style?: Style;
    children?: ReactNode | undefined;
};
type BalancesTableHeadNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableHead, BalancesTableHeadProps>;
export type BalancesTableHeadProps = {
    style?: Style;
    title: string;
    iconUrl: string;
    children?: ReactNode | undefined;
};
type BalancesTableContentNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableContent, BalancesTableContentProps>;
export type BalancesTableContentProps = {
    style?: Style;
    children?: ReactNode | undefined;
};
type BalancesTableRowNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableRow, BalancesTableRowProps>;
export type BalancesTableRowProps = {
    style?: Style;
    children?: ReactNode | undefined;
    onClick?: () => void;
};
type BalancesTableCellNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableCell, BalancesTableCellProps>;
export type BalancesTableCellProps = {
    icon?: string;
    title?: string;
    subtitle?: string;
    usdValue?: number;
    percentChange?: number;
    style?: Style;
    children?: ReactNode | undefined;
};
type BalancesTableFooterNodeSerialized = DefNodeSerialized<NodeKind.BalancesTableFooter, BalancesTableFooterProps>;
export type BalancesTableFooterProps = {
    style?: Style;
    children?: ReactNode | undefined;
};
export type Element = NodeSerialized | TextSerialized;
export type ElementPointer = {
    id: number;
    children?: Array<ElementPointer>;
};
type DefNodeSerialized<K, P> = {
    id: number;
    kind: K;
    props: P;
    children: Array<Element>;
};
type CustomNodeSerialized = {
    id: number;
    kind: NodeKind.Custom;
    props: CustomProps;
    children: Array<Element>;
    component: string;
};
export type UpdateDiff = any;
export {};
//# sourceMappingURL=reconciler.d.ts.map