import { useEffect, useState } from "react";
/*
 * @Depreciated over usePublicKeys
 */
export function usePublicKey() {
    var _a;
    const [publicKey, setPublicKey] = useState((_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.publicKey);
    useEffect(() => {
        var _a;
        (_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.on("publicKeyUpdate", () => {
            setPublicKey(window.xnft.solana.publicKey);
        });
    }, [setPublicKey]);
    return publicKey;
}
export function usePublicKeys() {
    const [publicKeys, setPublicKeys] = useState(window.xnft.publicKeys);
    useEffect(() => {
        window.xnft.on("publicKeysUpdate", () => {
            setPublicKeys(window.xnft.publicKeys);
        });
    }, [setPublicKeys]);
    return publicKeys;
}
/*
 * @Depreciated over individual connections
 */
export function useConnection() {
    var _a;
    const [connection, setConnection] = useState((_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.connection);
    useEffect(() => {
        var _a;
        (_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.on("connectionUpdate", () => {
            setConnection(window.xnft.solana.connection);
        });
    }, [setConnection]);
    return connection;
}
export function useSolanaConnection() {
    var _a;
    const [connection, setConnection] = useState((_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.connection);
    useEffect(() => {
        var _a;
        (_a = window.xnft.solana) === null || _a === void 0 ? void 0 : _a.on("connectionUpdate", () => {
            setConnection(window.xnft.solana.connection);
        });
    }, [setConnection]);
    return connection;
}
export function useEthereumConnection() {
    var _a;
    const [connection, setConnection] = useState((_a = window.xnft.ethereum) === null || _a === void 0 ? void 0 : _a.connection);
    useEffect(() => {
        var _a;
        (_a = window.xnft.ethereum) === null || _a === void 0 ? void 0 : _a.on("connectionUpdate", () => {
            setConnection(window.xnft.ethereum.connection);
        });
    }, [setConnection]);
    return connection;
}
// Returns true if the `window.xnft` object is ready to be used.
export function useDidLaunch() {
    const [didConnect, setDidConnect] = useState(false);
    useEffect(() => {
        window.addEventListener("load", () => {
            window.xnft.on("connect", () => {
                setDidConnect(true);
            });
            window.xnft.on("disconnect", () => {
                setDidConnect(false);
            });
        });
    }, []);
    return didConnect;
}
export function useMetadata() {
    var _a;
    const [metadata, setMetadata] = useState(((_a = window.xnft) === null || _a === void 0 ? void 0 : _a.metadata) || {});
    useEffect(() => {
        var _a;
        setMetadata(((_a = window.xnft) === null || _a === void 0 ? void 0 : _a.metadata) || {});
        window.xnft.addListener("metadata", (event) => {
            setMetadata(event.data.metadata);
        });
    }, []);
    return metadata;
}
export function useDimensions(debounceMs = 0) {
    const [dimensions, setDimensions] = useState({
        height: window.innerHeight,
        width: window.innerWidth,
    });
    const debounce = (fn) => {
        let timer;
        return () => {
            clearTimeout(timer);
            timer = setTimeout(() => {
                timer = null;
                // eslint-disable-next-line
                fn.apply(this, arguments);
            }, debounceMs);
        };
    };
    useEffect(() => {
        setDimensions({
            height: window.innerHeight,
            width: window.innerWidth,
        });
        const debouncedHandleResize = debounce(function handleResize() {
            setDimensions({
                height: window.innerHeight,
                width: window.innerWidth,
            });
        });
        window.addEventListener("resize", debouncedHandleResize);
        return () => {
            window.removeEventListener("resize", debouncedHandleResize);
        };
    }, []);
    return dimensions;
}
//# sourceMappingURL=hooks.js.map