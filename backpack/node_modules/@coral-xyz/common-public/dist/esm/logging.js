import { vanillaStore } from "./zustand-store";
import { isServiceWorker, IS_MOBILE } from "./utils";
import { MOBILE_CHANNEL_LOGS } from "./constants";
export function getLogger(mod) {
    return (() => {
        const _mod = mod;
        const prefix = isServiceWorker() ? "service-worker:" : "";
        return {
            debug: (str, ...args) => debug(`${prefix}anchor: ${_mod}: ${str}`, ...args),
            error: (str, ...args) => error(`${prefix}anchor: ${_mod}: ${str}`, ...args),
            _log,
        };
    })();
}
function debug(str, ...args) {
    log(str, ...args);
}
function error(str, ...args) {
    log(`ERROR: ${str}`, ...args);
}
function log(str, ...args) {
    if (IS_MOBILE) {
        _mobileLog(str, ...args);
    }
    else {
        _log(str, ...args);
    }
}
function _log(str, ...args) {
    console.log(str, ...args);
}
/**
 * Temporary logging helper function specifically for the mobile app
 *
 * An alternative to console.log which should ensure that your logs are
 * visible in the terminal, regardless of whether you are in a webview,
 * serviceworker or react native app.
 * @param args what to log
 */
async function _mobileLog(...args) {
    var _a, _b;
    // We're in the serviceworker, try sending the message to the HTML page.
    try {
        const clients = await self.clients.matchAll({
            includeUncontrolled: true,
            type: "window",
        });
        clients.forEach((client) => {
            client.postMessage({
                channel: MOBILE_CHANNEL_LOGS,
                data: args,
            });
        });
    }
    catch (err) {
        // Although we're already in the frontend code here, send the log back
        // to the webview so that we can log through the mobile subsystem.
        //
        (_b = (_a = vanillaStore.getState()) === null || _a === void 0 ? void 0 : _a.injectJavaScript) === null || _b === void 0 ? void 0 : _b.call(_a, `navigator.serviceWorker.onmessage(${JSON.stringify({
            data: {
                channel: MOBILE_CHANNEL_LOGS,
                data: args,
            },
        })}); true;`);
    }
}
//# sourceMappingURL=logging.js.map