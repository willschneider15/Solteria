/*
 * Copyright (C) 2023 Blue Coral, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
import { getAssociatedTokenAddressSync } from "@solana/spl-token";
import { Transaction } from "@solana/web3.js";
import { deriveInstallAddress, deriveMasterMintAddress, TOKEN_METADATA_PROGRAM_ID } from "./addresses";
/**
 * Create a full transaction for `create_app_xnft`.
 * @export
 * @param {...Parameters<typeof createCreateAppXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createCreateAppXnftTransaction(...args) {
    const ix = await createCreateAppXnftInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create the ix instance for the `create_app_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {string} name
 * @param {IdlCreateXnftParameters} params
 * @returns {Promise<TransactionInstruction>}
 */
export async function createCreateAppXnftInstruction(program, name, params) {
    if (!program.provider.publicKey) {
        throw new Error("no public key found on the program provider");
    }
    const [masterMint] = deriveMasterMintAddress(name, program.provider.publicKey);
    const masterToken = getAssociatedTokenAddressSync(masterMint, program.provider.publicKey);
    return program.methods
        .createAppXnft(name, params)
        .accounts({
        masterMint,
        masterToken,
        metadataProgram: TOKEN_METADATA_PROGRAM_ID,
    })
        .instruction();
}
/**
 * Create a full transaction for `create_collectible_xnft`.
 * @export
 * @param {...Parameters<typeof createCreateCollectibleXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createCreateCollectibleXnftTransaction(...args) {
    const ix = await createCreateCollectibleXnftInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create the ix instance for the `create_collectible_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {IdlCreateXnftParameters} params
 * @param {PublicKey} metadata
 * @param {PublicKey} mint
 * @returns {Promise<TransactionInstruction>}
 */
export async function createCreateCollectibleXnftInstruction(program, metadata, mint, params) {
    if (!program.provider.publicKey) {
        throw new Error("no public key found on the program provider");
    }
    const masterToken = getAssociatedTokenAddressSync(mint, program.provider.publicKey);
    return program.methods
        .createCollectibleXnft(params)
        .accounts({
        masterMint: mint,
        masterToken,
        masterMetadata: metadata,
    })
        .instruction();
}
/**
 * Create a full transaction for `create_install` or `create_permissioned_install`
 * based on the value of the `permissioned` argument.
 * @export
 * @param {...Parameters<typeof createCreateInstallInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createCreateInstallTransaction(...args) {
    const ix = await createCreateInstallInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create the ix instance for the `create_install` or `create_permissioned_install`
 * instructions based on the value provided in the `permissioned` argument.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} installVault
 * @param {boolean} [permissioned]
 * @returns {Promise<TransactionInstruction>}
 */
export async function createCreateInstallInstruction(program, xnft, installVault, permissioned) {
    return permissioned
        ? await program.methods.createPermissionedInstall().accounts({ xnft, installVault }).instruction()
        : await program.methods.createInstall().accounts({ xnft, installVault }).instruction();
}
/**
 * Create a full transaction for `create_review`.
 * @export
 * @param {...Parameters<typeof createCreateReviewInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createCreateReviewTransaction(...args) {
    const ix = await createCreateReviewInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `create_review` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {string} uri
 * @param {number} rating
 * @param {PublicKey} install
 * @param {PublicKey} masterToken
 * @param {PublicKey} xnft
 * @returns {Promise<TransactionInstruction>}
 */
export async function createCreateReviewInstruction(program, uri, rating, install, masterToken, xnft) {
    return program.methods
        .createReview(uri, rating)
        .accounts({
        install,
        masterToken,
        xnft,
    })
        .instruction();
}
/**
 * Create a full transaction for `delete_install`.
 * @export
 * @param {...Parameters<typeof createDeleteInstallInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createDeleteInstallTransaction(...args) {
    const ix = await createDeleteInstallInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `delete_install` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} [receiver]
 * @returns {Promise<TransactionInstruction>}
 */
export async function createDeleteInstallInstruction(program, xnft, receiver) {
    const [install] = deriveInstallAddress(program.provider.publicKey, xnft);
    return program.methods
        .deleteInstall()
        .accounts({
        install,
        receiver: receiver !== null && receiver !== void 0 ? receiver : program.provider.publicKey,
    })
        .instruction();
}
/**
 * Create a full transaction for `delete_review`.
 * @export
 * @param {...Parameters<typeof createDeleteReviewInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createDeleteReviewTransaction(...args) {
    const ix = await createDeleteReviewInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `delete_review` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} review
 * @param {PublicKey} [receiver]
 * @returns {Promise<TransactionInstruction>}
 */
export async function createDeleteReviewInstruction(program, review, receiver) {
    return program.methods
        .deleteReview()
        .accounts({
        review,
        receiver: receiver !== null && receiver !== void 0 ? receiver : program.provider.publicKey,
    })
        .instruction();
}
/**
 * Create a full transaction for `grant_access`.
 * @export
 * @param {...Parameters<typeof createGrantAccessInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createGrantAccessTransaction(...args) {
    const ix = await createGrantAccessInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `grant_access` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} wallet
 * @returns {Promise<TransactionInstruction>}
 */
export async function createGrantAccessInstruction(program, xnft, wallet) {
    return program.methods.grantAccess().accounts({ xnft, wallet }).instruction();
}
/**
 * Create a full transaction for `revoke_access`.
 * @export
 * @param {...Parameters<typeof createRevokeAccessInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createRevokeAccessTransaction(...args) {
    const ix = await createRevokeAccessInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `revoke_access` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} wallet
 * @returns {Promise<TransactionInstruction>}
 */
export async function createRevokeAccessInstruction(program, xnft, wallet) {
    return program.methods.revokeAccess().accounts({ xnft, wallet }).instruction();
}
/**
 * Create a full transaction for `set_curator`.
 * @export
 * @param {...Parameters<typeof createSetCuratorInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createSetCuratorTransaction(...args) {
    const ix = await createSetCuratorInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `set_curator` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {PublicKey} curator
 * @returns {Promise<TransactionInstruction>}
 */
export async function createSetCuratorInstruction(program, xnft, masterToken, curator) {
    return program.methods
        .setCurator()
        .accounts({
        xnft,
        masterToken,
        curator,
    })
        .instruction();
}
/**
 * Create a full transaction for `set_suspended`.
 * @export
 * @param {...Parameters<typeof createSetSuspendedInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createSetSuspendedTransaction(...args) {
    const ix = await createSetSuspendedInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `set_suspended` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {boolean} value
 * @returns {Promise<TransactionInstruction>}
 */
export async function createSetSuspendedInstruction(program, xnft, masterToken, value) {
    return program.methods.setSuspended(value).accounts({ masterToken, xnft }).instruction();
}
/**
 * Create a full transaction for `transfer`.
 * @export
 * @param {...Parameters<typeof createTransferInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createTransferTransaction(...args) {
    const ix = await createTransferInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `transfer` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterMint
 * @param {PublicKey} recipient
 * @returns {Promise<TransactionInstruction>}
 */
export async function createTransferInstruction(program, xnft, masterMint, recipient) {
    if (!program.provider.publicKey) {
        throw new Error("no public key found on the program provider");
    }
    const destination = getAssociatedTokenAddressSync(masterMint, recipient);
    const source = getAssociatedTokenAddressSync(masterMint, program.provider.publicKey);
    return program.methods
        .transfer()
        .accounts({
        xnft,
        masterMint,
        source,
        destination,
        recipient,
    })
        .instruction();
}
/**
 * Create a full transaction for `update_xnft`.
 * @export
 * @param {...Parameters<typeof createUpdateXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createUpdateXnftTransaction(...args) {
    const ix = await createUpdateXnftInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `update_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {IdlUpdateXnftParameters} params
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {PublicKey} [curator]
 * @returns {Promise<TransactionInstruction>}
 */
export async function createUpdateXnftInstruction(program, params, xnft, masterToken, curator) {
    return program.methods
        .updateXnft(params)
        .accounts({
        masterToken,
        curationAuthority: curator !== null && curator !== void 0 ? curator : program.provider.publicKey,
        xnft,
        metadataProgram: TOKEN_METADATA_PROGRAM_ID,
    })
        .instruction();
}
/**
 * Creates a full transaction for `verify_curator`.
 * @export
 * @param {...Parameters<typeof createVerifyCuratorInstruction>} args
 * @returns {Promise<Transaction>}
 */
export async function createVerifyCuratorTransaction(...args) {
    const ix = await createVerifyCuratorInstruction(...args);
    return new Transaction().add(ix);
}
/**
 * Create an ix instance for the `verify_curator` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @returns {Promise<TransactionInstruction>}
 */
export async function createVerifyCuratorInstruction(program, xnft) {
    return program.methods.verifyCurator().accounts({ xnft }).instruction();
}
//# sourceMappingURL=instructions.js.map