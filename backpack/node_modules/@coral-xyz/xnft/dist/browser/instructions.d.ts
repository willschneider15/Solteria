import { Program } from "@coral-xyz/anchor";
import { PublicKey, Transaction, TransactionInstruction } from "@solana/web3.js";
import type { IdlCreateXnftParameters, IdlUpdateXnftParameters } from "./types";
import type { Xnft } from "./xnft";
/**
 * Create a full transaction for `create_app_xnft`.
 * @export
 * @param {...Parameters<typeof createCreateAppXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createCreateAppXnftTransaction(...args: Parameters<typeof createCreateAppXnftInstruction>): Promise<Transaction>;
/**
 * Create the ix instance for the `create_app_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {string} name
 * @param {IdlCreateXnftParameters} params
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createCreateAppXnftInstruction(program: Program<Xnft>, name: string, params: IdlCreateXnftParameters): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `create_collectible_xnft`.
 * @export
 * @param {...Parameters<typeof createCreateCollectibleXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createCreateCollectibleXnftTransaction(...args: Parameters<typeof createCreateCollectibleXnftInstruction>): Promise<Transaction>;
/**
 * Create the ix instance for the `create_collectible_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {IdlCreateXnftParameters} params
 * @param {PublicKey} metadata
 * @param {PublicKey} mint
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createCreateCollectibleXnftInstruction(program: Program<Xnft>, metadata: PublicKey, mint: PublicKey, params: IdlCreateXnftParameters): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `create_install` or `create_permissioned_install`
 * based on the value of the `permissioned` argument.
 * @export
 * @param {...Parameters<typeof createCreateInstallInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createCreateInstallTransaction(...args: Parameters<typeof createCreateInstallInstruction>): Promise<Transaction>;
/**
 * Create the ix instance for the `create_install` or `create_permissioned_install`
 * instructions based on the value provided in the `permissioned` argument.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} installVault
 * @param {boolean} [permissioned]
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createCreateInstallInstruction(program: Program<Xnft>, xnft: PublicKey, installVault: PublicKey, permissioned?: boolean): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `create_review`.
 * @export
 * @param {...Parameters<typeof createCreateReviewInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createCreateReviewTransaction(...args: Parameters<typeof createCreateReviewInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `create_review` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {string} uri
 * @param {number} rating
 * @param {PublicKey} install
 * @param {PublicKey} masterToken
 * @param {PublicKey} xnft
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createCreateReviewInstruction(program: Program<Xnft>, uri: string, rating: number, install: PublicKey, masterToken: PublicKey, xnft: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `delete_install`.
 * @export
 * @param {...Parameters<typeof createDeleteInstallInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createDeleteInstallTransaction(...args: Parameters<typeof createDeleteInstallInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `delete_install` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} [receiver]
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createDeleteInstallInstruction(program: Program<Xnft>, xnft: PublicKey, receiver?: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `delete_review`.
 * @export
 * @param {...Parameters<typeof createDeleteReviewInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createDeleteReviewTransaction(...args: Parameters<typeof createDeleteReviewInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `delete_review` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} review
 * @param {PublicKey} [receiver]
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createDeleteReviewInstruction(program: Program<Xnft>, review: PublicKey, receiver?: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `grant_access`.
 * @export
 * @param {...Parameters<typeof createGrantAccessInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createGrantAccessTransaction(...args: Parameters<typeof createGrantAccessInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `grant_access` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} wallet
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createGrantAccessInstruction(program: Program<Xnft>, xnft: PublicKey, wallet: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `revoke_access`.
 * @export
 * @param {...Parameters<typeof createRevokeAccessInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createRevokeAccessTransaction(...args: Parameters<typeof createRevokeAccessInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `revoke_access` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} wallet
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createRevokeAccessInstruction(program: Program<Xnft>, xnft: PublicKey, wallet: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `set_curator`.
 * @export
 * @param {...Parameters<typeof createSetCuratorInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createSetCuratorTransaction(...args: Parameters<typeof createSetCuratorInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `set_curator` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {PublicKey} curator
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createSetCuratorInstruction(program: Program<Xnft>, xnft: PublicKey, masterToken: PublicKey, curator: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `set_suspended`.
 * @export
 * @param {...Parameters<typeof createSetSuspendedInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createSetSuspendedTransaction(...args: Parameters<typeof createSetSuspendedInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `set_suspended` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {boolean} value
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createSetSuspendedInstruction(program: Program<Xnft>, xnft: PublicKey, masterToken: PublicKey, value: boolean): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `transfer`.
 * @export
 * @param {...Parameters<typeof createTransferInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createTransferTransaction(...args: Parameters<typeof createTransferInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `transfer` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @param {PublicKey} masterMint
 * @param {PublicKey} recipient
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createTransferInstruction(program: Program<Xnft>, xnft: PublicKey, masterMint: PublicKey, recipient: PublicKey): Promise<TransactionInstruction>;
/**
 * Create a full transaction for `update_xnft`.
 * @export
 * @param {...Parameters<typeof createUpdateXnftInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createUpdateXnftTransaction(...args: Parameters<typeof createUpdateXnftInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `update_xnft` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {IdlUpdateXnftParameters} params
 * @param {PublicKey} xnft
 * @param {PublicKey} masterToken
 * @param {PublicKey} [curator]
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createUpdateXnftInstruction(program: Program<Xnft>, params: IdlUpdateXnftParameters, xnft: PublicKey, masterToken: PublicKey, curator?: PublicKey): Promise<TransactionInstruction>;
/**
 * Creates a full transaction for `verify_curator`.
 * @export
 * @param {...Parameters<typeof createVerifyCuratorInstruction>} args
 * @returns {Promise<Transaction>}
 */
export declare function createVerifyCuratorTransaction(...args: Parameters<typeof createVerifyCuratorInstruction>): Promise<Transaction>;
/**
 * Create an ix instance for the `verify_curator` instruction.
 * @export
 * @param {Program<Xnft>} program
 * @param {PublicKey} xnft
 * @returns {Promise<TransactionInstruction>}
 */
export declare function createVerifyCuratorInstruction(program: Program<Xnft>, xnft: PublicKey): Promise<TransactionInstruction>;
//# sourceMappingURL=instructions.d.ts.map