"use strict";
/*
 * Copyright (C) 2023 Blue Coral, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deriveXnftAddress = exports.deriveReviewAddress = exports.deriveMasterMintAddress = exports.deriveInstallAddress = exports.deriveAccessAddress = exports.TOKEN_METADATA_PROGRAM_ID = exports.PROGRAM_ID = void 0;
const web3_js_1 = require("@solana/web3.js");
exports.PROGRAM_ID = new web3_js_1.PublicKey("xnft5aaToUM4UFETUQfj7NUDUBdvYHTVhNFThEYTm55");
exports.TOKEN_METADATA_PROGRAM_ID = new web3_js_1.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
/**
 * Derive the PDA for an Access program account.
 * @export
 * @param {PublicKey} wallet
 * @param {PublicKey} xnft
 * @returns {[PublicKey, number]}
 */
function deriveAccessAddress(wallet, xnft) {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("access"), wallet.toBytes(), xnft.toBytes()], exports.PROGRAM_ID);
}
exports.deriveAccessAddress = deriveAccessAddress;
/**
 * Derive the PDA for an Install program account.
 * @export
 * @param {PublicKey} authority
 * @param {PublicKey} xnft
 * @returns {[PublicKey, number]}
 */
function deriveInstallAddress(authority, xnft) {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("install"), authority.toBytes(), xnft.toBytes()], exports.PROGRAM_ID);
}
exports.deriveInstallAddress = deriveInstallAddress;
/**
 * Derive the PDA of the master mint account.
 * @export
 * @param {string} name
 * @param {PublicKey} publisher
 * @returns {[PublicKey, number]}
 */
function deriveMasterMintAddress(name, publisher) {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("mint"), publisher.toBytes(), Buffer.from(name)], exports.PROGRAM_ID);
}
exports.deriveMasterMintAddress = deriveMasterMintAddress;
/**
 * Derive the PDA of a Review program account.
 * @export
 * @param {PublicKey} xnft
 * @param {PublicKey} author
 * @returns {[PublicKey, number]}
 */
function deriveReviewAddress(xnft, author) {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("review"), xnft.toBytes(), author.toBytes()], exports.PROGRAM_ID);
}
exports.deriveReviewAddress = deriveReviewAddress;
/**
 * Derive the PDA of the associated xNFT program account.
 * @export
 * @param {PublicKey} masterMint
 * @returns {[PublicKey, number]}
 */
function deriveXnftAddress(masterMint) {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("xnft"), masterMint.toBytes()], exports.PROGRAM_ID);
}
exports.deriveXnftAddress = deriveXnftAddress;
//# sourceMappingURL=addresses.js.map