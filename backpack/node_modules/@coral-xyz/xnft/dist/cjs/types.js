"use strict";
/*
 * Copyright (C) 2023 Blue Coral, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildJsonManifestSchema = exports.CollectibleJsonManifestSchema = exports.AppBuildJsonManifestSchema = exports.XnftMetadataPropertiesSchema = exports.ManifestSchema = exports.PropsSchema = exports.EntrypointsSchema = exports.EntrypointsDefaultSchema = exports.EntrypointsCustomSchema = exports.EntrypointPlatformsSchema = exports.TagSchema = exports.KindSchema = exports.PublicKeySchema = exports.ImageSizeOptionsSchema = exports.ScreenshotsSchema = exports.ManifestHistorySchema = exports.VersionSchema = exports.TagOptions = exports.KindOptions = void 0;
const web3_js_1 = require("@solana/web3.js");
const semver_1 = __importDefault(require("semver"));
const zod_1 = require("zod");
const xnft_1 = require("./xnft");
// =================
// ABSTRACTION TYPES
// =================
exports.KindOptions = xnft_1.IDL.types[4].type.variants.map(v => v.name);
console.assert(xnft_1.IDL.types[4].type.variants.map(v => v.name).includes("App"));
exports.TagOptions = xnft_1.IDL.types[5].type.variants.map(v => v.name);
console.assert(xnft_1.IDL.types[5].type.variants.map(v => v.name).includes("Defi"));
// =========================
// MANIFEST SCHEMA AND TYPES
// =========================
exports.VersionSchema = zod_1.z
    .custom()
    .refine(val => semver_1.default.valid(val) !== null, {
    message: "Invalid semantic version",
    path: ["version"],
});
exports.ManifestHistorySchema = zod_1.z.object({ version: exports.VersionSchema, uri: zod_1.z.string() }).array();
exports.ScreenshotsSchema = zod_1.z
    .object({
    uri: zod_1.z.string(),
    type: zod_1.z.string(),
})
    .array();
exports.ImageSizeOptionsSchema = zod_1.z
    .object({
    sm: zod_1.z.string(),
    md: zod_1.z.string(),
    lg: zod_1.z.string(),
})
    .strict()
    .partial()
    .refine(({ sm, md, lg }) => sm !== undefined || md !== undefined || lg !== undefined, {
    message: "At least one image size must be defined",
});
exports.PublicKeySchema = zod_1.z.string().refine(val => {
    try {
        new web3_js_1.PublicKey(val);
        return true;
    }
    catch {
        return false;
    }
}, {
    message: "Invalid public key",
});
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.KindSchema = zod_1.z.union(exports.KindOptions.map(k => zod_1.z.literal(k.toLowerCase())));
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.TagSchema = zod_1.z.union(exports.TagOptions.map(t => zod_1.z.literal(t.toLowerCase())));
exports.EntrypointPlatformsSchema = zod_1.z
    .object({
    android: zod_1.z.string(),
    ios: zod_1.z.string(),
    web: zod_1.z.string(),
})
    .strict()
    .partial()
    .refine(({ android, ios, web }) => android !== undefined || ios !== undefined || web !== undefined, {
    message: "At least one platform key must be defined for an entrypoint",
});
exports.EntrypointsCustomSchema = zod_1.z.record(exports.EntrypointPlatformsSchema);
exports.EntrypointsDefaultSchema = zod_1.z.object({
    default: exports.EntrypointPlatformsSchema,
});
exports.EntrypointsSchema = exports.EntrypointsDefaultSchema.and(exports.EntrypointsCustomSchema);
exports.PropsSchema = zod_1.z.any();
exports.ManifestSchema = zod_1.z.object({
    entrypoints: exports.EntrypointsSchema,
    icon: exports.ImageSizeOptionsSchema,
    props: exports.PropsSchema.optional(),
    screenshots: exports.ScreenshotsSchema.optional(),
    splash: exports.ImageSizeOptionsSchema.optional(),
});
exports.XnftMetadataPropertiesSchema = zod_1.z.object({
    version: exports.VersionSchema,
    manifest: exports.ManifestSchema,
    programIds: exports.PublicKeySchema.array().optional(),
    history: exports.ManifestHistorySchema,
});
exports.AppBuildJsonManifestSchema = zod_1.z.object({
    description: zod_1.z.string().min(5),
    entrypoints: exports.EntrypointsSchema,
    icon: exports.ImageSizeOptionsSchema,
    installAuthority: exports.PublicKeySchema.optional(),
    installVault: exports.PublicKeySchema.optional(),
    kind: zod_1.z.literal("app"),
    name: zod_1.z.string().min(1).max(32),
    price: zod_1.z.number().nonnegative().optional(),
    programIds: exports.PublicKeySchema.array().optional(),
    props: zod_1.z.any().optional(),
    royalitesPercentage: zod_1.z.number().nonnegative().max(100).optional(),
    screenshots: zod_1.z.union([exports.ScreenshotsSchema, zod_1.z.string().array()]).optional(),
    splash: exports.ImageSizeOptionsSchema.optional(),
    supply: zod_1.z.number().min(1).optional(),
    tag: exports.TagSchema.optional(),
    version: exports.VersionSchema,
    website: zod_1.z.string().url(),
});
exports.CollectibleJsonManifestSchema = zod_1.z.object({
    collectibleMint: exports.PublicKeySchema,
    entrypoints: exports.EntrypointsSchema,
    kind: zod_1.z.literal("collectible"),
    programIds: exports.PublicKeySchema.array().optional(),
    props: zod_1.z.any().optional(),
    screenshots: zod_1.z.union([exports.ScreenshotsSchema, zod_1.z.string().array()]).optional(),
    splash: exports.ImageSizeOptionsSchema.optional(),
    version: exports.VersionSchema,
});
exports.BuildJsonManifestSchema = zod_1.z.discriminatedUnion("kind", [
    exports.AppBuildJsonManifestSchema,
    exports.CollectibleJsonManifestSchema,
]);
//# sourceMappingURL=types.js.map